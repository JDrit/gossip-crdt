buildscript {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'idea'
}
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id "org.jruyi.thrift" version "0.3.1"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

configurations { // Needs to go before dependencies
    quasar
}

group 'net.batchik'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // gossip crdt service
    compile group: 'org.apache.thrift', name: 'libthrift', version: '0.9.3'

    // logging infrastructure
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.4'
    compile group: 'org.apache.curator', name: 'curator-x-discovery', version: '2.10.0'
    compile 'co.paralleluniverse:quasar-core:0.7.5:jdk8'
    quasar  "co.paralleluniverse:quasar-core:0.7.5:jdk8@jar"


    //compile group: 'co.paralleluniverse', name: 'comsat-actors-api', version: '0.7.0'
    //compile group: 'co.paralleluniverse', name: 'comsat-actors-servlet', version: '0.7.0'
    //compile group: 'co.paralleluniverse', name: 'comsat-jax-rs-client', version: '0.7.0'

}

compileThrift {
    recurse true
    generator 'html'
    generator 'java', 'private-members'
    outputDir "$projectDir/src/generated"
}

classes {
    doFirst {
        println "Excuting scanSuspendables..."
        ant.taskdef(
                name: 'scanSuspendables',
                classname: 'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
                classpath: "build/classes/main:build/resources/main:${configurations.quasar.asPath}:${configurations.runtime.asPath}")
        ant.scanSuspendables(
                auto: true,
                suspendablesFile: "src/main/resources/META-INF/suspendables",
                supersFile: "src/main/resources/META-INF/suspendable-supers",
                append: true) {
            fileset(dir: sourceSets.main.output.classesDir)
        }
    }
}

defaultTasks 'build', 'writeClasspath'

version = '1.0'
def jarTitle = 'gossip-crdt'
def mainClass = 'net.batchik.crdt.Main'

jar {
    baseName = 'crdt'
    manifest {
        attributes 'Implementation-Title': jarTitle,
                   'Implementation-Version': version,
                   'Main-Class': mainClass
    }
}

task fatJar(type: Jar) {
    baseName = 'crdt-all'
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Implementation-Title': jarTitle,
                'Implementation-Version': version,
                'Main-Class': mainClass
    }
    with jar
}

/*
 * Write out the classpath for all internal dependencies, then append the
 * actual expected build JAR to the end of it.
 */
task writeClasspath(dependsOn: build) << {
    new File(buildDir.absolutePath + "/runtime.classpath").withWriter {
        out -> out.writeLine(sourceSets.main.runtimeClasspath.asPath +
                ":" + jar.archivePath);
    }
    new File(buildDir.absolutePath + "/quasar-core.path").withWriter {
        out -> out.writeLine(configurations.quasar.asPath);
    }
}
