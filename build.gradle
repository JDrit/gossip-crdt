buildscript {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'application'
}
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id "org.jruyi.thrift" version "0.3.1"
    id "us.kirchmeier.capsule" version "1.0.2"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
defaultTasks 'build', 'writeClasspath'
version = '1.0'
def jarTitle = 'gossip-crdt'
def mainClass = 'net.batchik.crdt.Main'
mainClassName = mainClass

repositories {
    mavenCentral()
}

configurations {
    quasar
    capsule
}

group 'net.batchik'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // gossip crdt service
    compile group: 'org.apache.thrift', name: 'libthrift', version: '0.9.3'

    // logging infrastructure
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21'

    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.4'
    compile group: 'org.apache.curator', name: 'curator-x-discovery', version: '2.10.0'

    compile 'co.paralleluniverse:capsule:1.0.2'
    compile 'co.paralleluniverse:quasar-core:0.7.5:jdk8'
    quasar  "co.paralleluniverse:quasar-core:0.7.5:jdk8@jar"

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

compileThrift {
    recurse true
    generator 'html'
    generator 'java', 'private-members'
    outputDir "$projectDir/src/generated"
}

classes {
    doFirst {
        ant.taskdef(
                name: 'scanSuspendables',
                classname: 'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
                classpath: "build/classes/main:build/resources/main:${configurations.quasar.asPath}:${configurations.runtime.asPath}")
        ant.scanSuspendables(
                auto: true,
                suspendablesFile: "src/main/resources/META-INF/suspendables",
                supersFile: "src/main/resources/META-INF/suspendable-supers",
                append: true) {
            fileset(dir: sourceSets.main.output.classesDir)
        }
    }
}

jar {
    baseName = 'crdt'
    manifest {
         attributes (
                 'Implementation-Title': jarTitle,
                 'Implementation-Version': version,
                 'Main-Class': mainClass
         )
    }
}

// converts Gradle dependencies to Capsule dependencies
def getDependencies(config) {
    return config.getAllDependencies().collect {
        def res = it.group + ':' + it.name + ':' + it.version +
                (!it.artifacts.isEmpty() ? ':' + it.artifacts.iterator().next().classifier : '')
        if(!it.excludeRules.isEmpty()) {
            res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")"
        }
        return res
    }
}

task mavenCapsule(type: MavenCapsule){
    applicationClass mainClass
    from sourceSets.main.output // this way we don't need to extract
    from { configurations.capsule.collect { zipTree(it) } }
    manifest {
        attributes(
                'Main-Class'  : 'Capsule',
                'Application-Class' : mainClassName,
                'Min-Java-Version' : '1.8.0',
                'JVM-Args' : run.jvmArgs.join(' '), // copy JVM args from the run task
                'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '), // copy system properties
                'Java-Agents' : getDependencies(configurations.quasar).iterator().next(),
                'Dependencies': getDependencies(configurations.runtime).join(' ')
        )
    }
}

/*
 * Write out the classpath for all internal dependencies, then append the
 * actual expected build JAR to the end of it.
 */
task writeClasspath(dependsOn: build) << {
    new File(buildDir.absolutePath + "/runtime.classpath").withWriter {
        out -> out.writeLine(sourceSets.main.runtimeClasspath.asPath +
                ":" + jar.archivePath);
    }
    new File(buildDir.absolutePath + "/quasar-core.path").withWriter {
        out -> out.writeLine(configurations.quasar.asPath);
    }
}

run {
    jvmArgs "-javaagent:${configurations.quasar.iterator().next()}"
}
